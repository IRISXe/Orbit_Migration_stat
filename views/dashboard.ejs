<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Migration Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="/css/style.css">

    <style>
        body, html {
            background: #181E24;
            padding-top: 10px;
            margin: 0;
            font-family: Arial, sans-serif;
        }

        .wrapper {
            width: 80%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        canvas {
            background: #fff;
            height: 400px;
        }

        h3, h1 {
            font-family: Roboto, sans-serif;
            color: #000;
            margin-top: 20px;
            font-weight: 200;
            text-align: center;
            text-decoration: none;
        }

        .header-info {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
            align-items: center;
        }

        .info-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: #f4f4f4;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .charts-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .chart-container {
            flex: 1;
            min-width: 300px;
            max-width: 500px;
            border-radius: 8px;
            overflow: hidden;
            background: #f4f4f4;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 10px;
        }

        a {
            display: block;
            text-align: center;
            margin-top: 20px;
            color: #007BFF;
            text-decoration: none;
            font-size: 16px;
        }

        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="wrapper">
        <h1>Migration Dashboard</h1>

        <div>
            <h3>Received Migration Data</h3>

            <!-- Header Info Circles -->
          <div>
            <div class="header-info">
                <% if (data1 && Array.isArray(data1) && data1.length > 0) { %>
                    <% data1.forEach(item => { %>
                      <div>
                        <strong><%= item.ELEMENT || 'Unknown Element' %></strong>
                        <div class="info-circle" id="pre<%= item.ELEMENT ? item.ELEMENT.replace(/\s+/g, '').toLowerCase() : 'unknown' %>">
                          <%= item.VALUE || '0' %>
                        </div>
                      </div>
                    <% }); %>
                  <% } else { %>
                    <p>No data available to display.</p>
                  <% } %>
                  
        </div>
          </div>

            

        <div>
            <h3>Current Migrated Data</h3>
            <!-- Header Info Circles -->
            <div class="header-info">
                <% data2.forEach(item => { %>
                    <div>
                      <strong><%= item.ELEMENT || 'Unknown Element' %></strong>
                      <div class="info-circle" id="<%= item.ELEMENT ? item.ELEMENT.replace(/\s+/g, '').toLowerCase() : 'unknown' %>">
                        <%= item.VALUE || '0' %>
                      </div>
                    </div>
                  <% }); %>
                
            </div>
            </div>
        </div>

        <!-- Charts Container -->
        <div class="charts-container">
            <!-- Line Chart: Migration by Year -->
            <div class="chart-container">
                <canvas id="migrationByYear"></canvas>
            </div>

            <!-- Bar Chart: Migration by Region -->
            <div class="chart-container">
                <canvas id="migrationByRegion"></canvas>
            </div>

            <!-- Pie Chart: Gender Distribution -->
            <div class="chart-container">
                <canvas id="genderDistribution"></canvas>
            </div>

            <!-- Bar Chart: Age Group Distribution -->
            <div class="chart-container">
                <canvas id="ageGroupDistribution"></canvas>
            </div>

            <!-- Pie Chart: Top 5 Countries of Origin -->
            <div class="chart-container">
                <canvas id="countriesOfOrigin"></canvas>
            </div>
        </div>

        <a href="/next-page">Go to Next Page</a>
    </div>
    <script>
       document.addEventListener('DOMContentLoaded', function () {
    // Initialize chart variables
    let migrationByYearChart, migrationByRegionChart, genderDistributionChart, ageGroupDistributionChart, countriesOfOriginChart;

    // Function to fetch and update data
    async function fetchData() {
        try {
            const response = await fetch('/data-json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
         
            const data = await response.json();
           // const data = await response.json();
            const { data1, data2 } = data;
            // Assuming data1 and data2 are updated on the server
            
            updateCircles(data1,data2);
            updateCharts(data2);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    // Function to update the circle elements
    function updateCircles(data1,data2) {
        data1.forEach(item => {
            const elementId = `pre${item.ELEMENT.replace(/\s+/g, '').toLowerCase()}`;
            const circleElement = document.getElementById(elementId);
            
            if (circleElement) {
                circleElement.textContent = item.VALUE;
            } else {
                console.warn(`Element with ID ${elementId} not found.`);
            }
        });
        data2.forEach(item => {
            const elementId = `${item.ELEMENT.replace(/\s+/g, '').toLowerCase()}`;
            const circleElement = document.getElementById(elementId);
            
            if (circleElement) {
                circleElement.textContent = item.VALUE;
            } else {
                console.warn(`Element with ID ${elementId} not found.`);
            }
        });
    }

    // Function to update the charts
    function updateCharts(data) {
        // Sample data for demonstration, replace with actual data from the server
        const chartData = {
            migrationByYear: [
                { YEAR: '2019', MIGRATION_COUNT: 500 },
                { YEAR: '2020', MIGRATION_COUNT: 600 },
                { YEAR: '2021', MIGRATION_COUNT: 700 },
                { YEAR: '2022', MIGRATION_COUNT: 800 },
                { YEAR: '2023', MIGRATION_COUNT: 900 }
            ],
            migrationByRegion: [
                { REGION: 'North America', MIGRATION_COUNT: 300 },
                { REGION: 'Europe', MIGRATION_COUNT: 400 },
                { REGION: 'Asia', MIGRATION_COUNT: 500 },
                { REGION: 'Africa', MIGRATION_COUNT: 200 },
                { REGION: 'South America', MIGRATION_COUNT: 150 }
            ],
            genderDistribution: [
                { GENDER: 'Male', COUNT: 1200 },
                { GENDER: 'Female', COUNT: 1300 }
            ],
            ageGroupDistribution: [
                { AGE_GROUP: '18-24', COUNT: 500 },
                { AGE_GROUP: '25-34', COUNT: 600 },
                { AGE_GROUP: '35-44', COUNT: 450 },
                { AGE_GROUP: '45-54', COUNT: 350 },
                { AGE_GROUP: '55+', COUNT: 300 }
            ],
            countriesOfOrigin: [
                { COUNTRY: 'USA', COUNT: 400 },
                { COUNTRY: 'Canada', COUNT: 300 },
                { COUNTRY: 'Mexico', COUNT: 250 },
                { COUNTRY: 'Brazil', COUNT: 200 },
                { COUNTRY: 'Argentina', COUNT: 150 }
            ]
        };

        // Migration by Year Line Chart
        if (migrationByYearChart) migrationByYearChart.destroy();
        const migrationByYearData = chartData.migrationByYear;
        const years = migrationByYearData.map(row => row.YEAR);
        const migrationCounts = migrationByYearData.map(row => row.MIGRATION_COUNT);
        migrationByYearChart = new Chart(document.getElementById('migrationByYear').getContext('2d'), {
            type: 'line',
            data: {
                labels: years,
                datasets: [{
                    label: 'Migration by Year',
                    data: migrationCounts,
                    fill: false,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    tension: 0.1
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        // Migration by Region Chart
        if (migrationByRegionChart) migrationByRegionChart.destroy();
        const migrationByRegionData = chartData.migrationByRegion;
        const regions = migrationByRegionData.map(row => row.REGION);
        const regionMigrationCounts = migrationByRegionData.map(row => row.MIGRATION_COUNT);
        migrationByRegionChart = new Chart(document.getElementById('migrationByRegion').getContext('2d'), {
            type: 'bar',
            data: {
                labels: regions,
                datasets: [{
                    label: 'Migration by Region',
                    data: regionMigrationCounts,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        // Gender Distribution Chart
        if (genderDistributionChart) genderDistributionChart.destroy();
        const genderDistributionData = chartData.genderDistribution;
        const genders = genderDistributionData.map(row => row.GENDER);
        const genderCounts = genderDistributionData.map(row => row.COUNT);
        genderDistributionChart = new Chart(document.getElementById('genderDistribution').getContext('2d'), {
            type: 'pie',
            data: {
                labels: genders,
                datasets: [{
                    label: 'Gender Distribution',
                    data: genderCounts,
                    backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'],
                    borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],
                    borderWidth: 1
                }]
            }
        });

        // Age Group Distribution Chart
        if (ageGroupDistributionChart) ageGroupDistributionChart.destroy();
        const ageGroupDistributionData = chartData.ageGroupDistribution;
        const ageGroups = ageGroupDistributionData.map(row => row.AGE_GROUP);
        const ageGroupCounts = ageGroupDistributionData.map(row => row.COUNT);
        ageGroupDistributionChart = new Chart(document.getElementById('ageGroupDistribution').getContext('2d'), {
            type: 'bar',
            data: {
                labels: ageGroups,
                datasets: [{
                    label: 'Age Group Distribution',
                    data: ageGroupCounts,
                    backgroundColor: 'rgba(255, 206, 86, 0.2)',
                    borderColor: 'rgba(255, 206, 86, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        // Top 5 Countries of Origin Chart
        if (countriesOfOriginChart) countriesOfOriginChart.destroy();
        const countriesOfOriginData = chartData.countriesOfOrigin;
        const countries = countriesOfOriginData.map(row => row.COUNTRY);
        const countryCounts = countriesOfOriginData.map(row => row.COUNT);
        countriesOfOriginChart = new Chart(document.getElementById('countriesOfOrigin').getContext('2d'), {
            type: 'pie',
            data: {
                labels: countries,
                datasets: [{
                    label: 'Top 5 Countries of Origin',
                    data: countryCounts,
                    backgroundColor: ['rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'],
                    borderColor: ['rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)', 'rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],
                    borderWidth: 1
                }]
            }
        });
    }

    // Call fetchData every 10 seconds
   setInterval(fetchData, 10000);

    // Initial fetch when page loads
  fetchData();
});

    </script>
    
    
</body>
</html>
