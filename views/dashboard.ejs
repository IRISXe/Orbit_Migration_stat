<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Migration Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

    
    <link rel="stylesheet" href="/css/style.css">

    <style>
        body, html {
            background: #181E24;
            padding-top: 10px;
            margin: 0;
            font-family: Arial, sans-serif;
        }

        .wrapper {
            width: 80%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        canvas {
            background: #fff;
            height: 400px;
        }

        h3, h1 {
            font-family: Roboto, sans-serif;
            color: #000;
            margin-top: 20px;
            font-weight: 200;
            text-align: center;
            text-decoration: none;
        }

        .header-info {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
            align-items: center;
        }

        .info-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: #f4f4f4;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .charts-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .chart-container {
    flex: 1;
    min-width: 400px;  /* Increase minimum width */
    max-width: 600px;  /* Set a larger maximum width */
    height: 400px;     /* Ensure consistent height */
    border-radius: 8px;
    overflow: hidden;
    background: #f4f4f4;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 10px;
}

canvas {
    width: 100% !important;  /* Ensure canvas takes up the entire container width */
    height: 100% !important; /* Ensure canvas takes up the entire container height */
}

        a {
            display: block;
            text-align: center;
            margin-top: 20px;
            color: #007BFF;
            text-decoration: none;
            font-size: 16px;
        }

        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="wrapper">
        <h1>Migration Dashboard</h1>

        <div>
            <h3>Received Migration Data</h3>

            <!-- Header Info Circles -->
          <div>
            <div class="header-info">
                <% if (data1 && Array.isArray(data1) && data1.length > 0) { %>
                    <% data1.forEach(item => { %>
                      <div>
                        <strong><%= item.ELEMENT || 'Unknown Element' %></strong>
                        <div class="info-circle" id="pre<%= item.ELEMENT ? item.ELEMENT.replace(/\s+/g, '').toLowerCase() : 'unknown' %>">
                          <%= item.VALUE || '0' %>
                        </div>
                      </div>
                    <% }); %>
                  <% } else { %>
                    <p>No data available to display.</p>
                  <% } %>
                  
        </div>
          </div>

            

        <div>
            <h3>Current Migrated Data</h3>
            <!-- Header Info Circles -->
            <div class="header-info">
                <% data2.forEach(item => { %>
                    <div>
                      <strong><%= item.ELEMENT || 'Unknown Element' %></strong>
                      <div class="info-circle" id="<%= item.ELEMENT ? item.ELEMENT.replace(/\s+/g, '').toLowerCase() : 'unknown' %>">
                        <%= item.VALUE || '0' %>
                      </div>
                    </div>
                  <% }); %>
                
            </div>
            </div>
        </div>

        <!-- Charts Container -->
        <div class="charts-container">
            <!-- Line Chart: Migration by Year -->
            <div class="chart-container">
                <canvas id="migrationByYear"></canvas>
            </div>

            <!-- Bar Chart: Migration by Region -->
            <div class="chart-container">
                <canvas id="migrationByRegion"></canvas>
            </div>

            <!-- Pie Chart: Gender Distribution -->
            <div class="chart-container">
                <canvas id="genderDistribution"></canvas>
            </div>

            <!-- Bar Chart: Age Group Distribution -->
            <div class="chart-container">
                <canvas id="ageGroupDistribution"></canvas>
            </div>

            <!-- Pie Chart: Top 5 Countries of Origin -->
            <div class="chart-container">
                <canvas id="countriesOfOrigin"></canvas>
            </div>
        </div>

        <a href="/next-page">Go to Next Page</a>
    </div>
    <script>
       document.addEventListener('DOMContentLoaded', function () {
    // Initialize chart variables
    let migrationByYearChart, migrationByRegionChart, genderDistributionChart, ageGroupDistributionChart, countriesOfOriginChart;

    // Function to fetch and update data
    async function fetchData() {
        try {
            const response = await fetch('/data-json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            const { data1, data2 } = data;
            
            // Update circles and charts
            updateCircles(data1, data2);
            updateCharts(data2);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    // Function to update the circle elements
    function updateCircles(data1, data2) {
        data1.forEach(item => {
            const elementId = `pre${item.ELEMENT.replace(/\s+/g, '').toLowerCase()}`;
            const circleElement = document.getElementById(elementId);
            if (circleElement) {
                circleElement.textContent = item.VALUE;
            }
        });
        data2.forEach(item => {
            const elementId = `${item.ELEMENT.replace(/\s+/g, '').toLowerCase()}`;
            const circleElement = document.getElementById(elementId);
            if (circleElement) {
                circleElement.textContent = item.VALUE;
            }
        });
    }

    // Function to update the charts
    function updateCharts(data2) {
        const Chartlabels2 = data2.map(item => item.ELEMENT);
        const dataChart2 = data2.map(item => parseInt(item.VALUE, 10));

        const labels2 = data2.map(item => item.ELEMENT);
        const values2 = data2.map(item => parseInt(item.VALUE));

        // Destroy existing charts before re-initializing them
        if (migrationByYearChart) {
            migrationByYearChart.destroy();
        }

        // Create datasets dynamically with different colors
        const colors = [
            'rgba(255, 99, 132, 0.5)', // Red
            'rgba(54, 162, 235, 0.5)', // Blue
            'rgba(255, 206, 86, 0.5)', // Yellow
            'rgba(75, 192, 192, 0.5)', // Green
            'rgba(153, 102, 255, 0.5)'  // Purple
        ];

        const datasets = labels2.map((label, index) => ({
            label: label,
            data: [values2[index]],
            backgroundColor: colors[index],
            borderColor: colors[index].replace('0.5', '1'),
            borderWidth: 1
        }));

        const ctx = document.getElementById('migrationByYear').getContext('2d');
        migrationByYearChart = new Chart(ctx, {
            type: 'bar', // Horizontal bar chart
            data: {
                labels: labels2, // Single category axis
                datasets: datasets // Multiple datasets for different colors
            },
            options: {
               
    indexAxis: 'y',
    // Elements options apply to all of the options unless overridden in a dataset
    // In this case, we are setting the border of each horizontal bar to be 2px wide
    elements: {
      bar: {
        borderWidth: 2,
      }
    },
    responsive: true,
    plugins: {
      legend: {
        position: 'right',
      },
      title: {
        display: true,
        text: 'Chart.js Horizontal Bar Chart'
      }
    }
  },
        });

        // Destroy and reinitialize other charts similarly
        if (migrationByRegionChart) migrationByRegionChart.destroy();
        migrationByRegionChart = new Chart(document.getElementById('migrationByRegion').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Chartlabels2,
                datasets: [{
                    label: 'Migration by Region',
                    data: dataChart2,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        if (genderDistributionChart) genderDistributionChart.destroy();
        genderDistributionChart = new Chart(document.getElementById('genderDistribution').getContext('2d'), {
            type: 'pie',
            data: {
                labels: Chartlabels2,
                datasets: [{
                    label: 'Gender Distribution',
                    data: dataChart2,
                    backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'],
                    borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],
                    borderWidth: 1
                }]
            }
        });

        if (ageGroupDistributionChart) ageGroupDistributionChart.destroy();
        ageGroupDistributionChart = new Chart(document.getElementById('ageGroupDistribution').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Chartlabels2,
                datasets: [{
                    label: 'Migrated Data',
                    data: dataChart2,
                    backgroundColor: 'rgba(255, 206, 86, 0.2)',
                    borderColor: 'rgba(255, 206, 86, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        if (countriesOfOriginChart) countriesOfOriginChart.destroy();
        countriesOfOriginChart = new Chart(document.getElementById('countriesOfOrigin').getContext('2d'), {
            type: 'pie',
            data: {
                labels: Chartlabels2,
                datasets: [{
                    label: 'Top 5 Countries of Origin',
                    data: dataChart2,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            plugins: [ChartDataLabels]
        });
    }

    // Fetch data every 10 seconds
    fetchData();
    setInterval(fetchData, 10000);
});

    </script>
    
    
</body>
</html>
